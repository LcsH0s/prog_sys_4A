#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#define SIZE_FIFO 8
#define NB_PROD 1
#define NB_CONSO 1
#define NB_MESSAGE 10 // Number of messages a producer sends
#define DEBUG_MODE 1
sem_t *fifoSem;

// Structure Fifo communication entre consommateurs et producteurs
typedef struct fifo {
  int tab[SIZE_FIFO]; // Tableau d'éléments stockés
  int ptr_lecteur;    // Index de la prochaine case à lire
  int ptr_ecrivain;   // Index de la prochaine case à écrire
  int nb_elem;        // Nombre d'éléments présents dans la fifo
} fifo;

// Fonction d'initialisation de la fifo
void init_fifo(struct fifo *f) {
  (*f).ptr_ecrivain = 0;
  (*f).ptr_lecteur = -1; // -1 meaning there is nothing to read
  (*f).nb_elem = 0;
}

// Fonction permettant d'insérer une valeur dans la fifo
void put(struct fifo *f, int a) {
  if ((*f).nb_elem == SIZE_FIFO) {
    if (DEBUG_MODE) {
      printf("[ERROR] Queue error: impossible to add new element. Queue is "
             "full (%d "
             "elements).\n",
             (*f).nb_elem);
      fflush(stdout);
    }
    return;
  } else {
    (*f).tab[(*f).ptr_ecrivain] = a;
    (*f).nb_elem++;
    (*f).ptr_ecrivain++;
    (*f).ptr_lecteur++;
    if (DEBUG_MODE) {
      printf("[DEBUG] put function value %d added at index %d\n", a,
             (*f).ptr_ecrivain);
      fflush(stdout);
    }
  }
}

// Fonction permettant de récupérer une valeur depuis la fifo
int get(struct fifo *f) {
  if ((*f).ptr_lecteur == -1) {
    if (DEBUG_MODE) {
      printf("[ERROR] Queue error: impossible to get element from queue. Queue "
             "empty\n");
      fflush(stdout);
    }
    return -1;
  } else {
    int r = (*f).tab[(*f).ptr_lecteur];
    if (DEBUG_MODE) {
      printf("[DEBUG] get function : value %d popped from index %d\n", r,
             (*f).ptr_lecteur);
      fflush(stdout);
    }
    (*f).ptr_lecteur--;
    (*f).ptr_ecrivain--;
    (*f).nb_elem--;
    return r;
  }
}

// Fonction de production
void *prod(void *arg) {
  fifo *f = (fifo *)arg;
  int i = 0;
  for (;;) {
    sem_wait(fifoSem);
    if ((*f).nb_elem < SIZE_FIFO) {
      put(f, rand());
      if (DEBUG_MODE) {
        printf("[DEBUG] prod function : value added to queue\n");
        fflush(stdout);
      }
      i++;
      if (i == NB_MESSAGE)
        return NULL;
    } else if (DEBUG_MODE) {
      printf("[DEBUG] prod function : queue full\n");
      fflush(stdout);
    }
    sem_post(fifoSem);
    sleep(1);
  }
  return NULL;
}

// Fonction de consommation
void *conso(void *arg) {
  fifo *f = (fifo *)arg;
  int i = 0;
  int msg;
  for (;;) {
    sem_wait(fifoSem);
    if ((*f).ptr_lecteur > -1) {
      msg = get(f);
      printf("Received value : %d\n", msg);
      fflush(stdout);
      i++;
      if (i == NB_MESSAGE)
        return NULL;
    } else if (DEBUG_MODE) {
      printf("[DEBUG] conso function : nothing to consume\n");
      fflush(stdout);
    }
    sem_post(fifoSem);
    sleep(1);
  }
  return NULL;
}

// Fonction principale
int main() {
  pthread_t pidProd[NB_PROD];   // pid array of producers
  pthread_t pidConso[NB_CONSO]; // pid array of consumers
  fifo f;                       // Fifo struct
  fifoSem = sem_open("/fifoSem", O_CREAT, 0644, 1);

  srand((unsigned int)time(NULL)); // Seed rand on time

  if (DEBUG_MODE) {
    printf("[DEBUG] Initializing FIFO queue\n");
    fflush(stdout);
  }
  init_fifo(&f); // Fifo struct initialization

  if (DEBUG_MODE) {
    printf("[DEBUG] Creating producer threads\n");
    fflush(stdout);
  }
  for (int i = 0; i < NB_PROD; i++) {
    pthread_create(&pidProd[i], NULL, prod, (void *)&f);
  }

  if (DEBUG_MODE) {
    printf("[DEBUG] Creating consumer threads\n");
    fflush(stdout);
  }
  for (int i = 0; i < NB_CONSO; i++) {
    pthread_create(&pidConso[i], NULL, conso, (void *)&f);
  }

  if (DEBUG_MODE) {
    printf("[DEBUG] Joining producer threads\n");
    fflush(stdout);
  }
  for (int i = 0; i < NB_PROD; ++i) {
    pthread_join(pidProd[i], NULL);
  }

  if (DEBUG_MODE) {
    printf("[DEBUG] Joining consumer threads\n");
    fflush(stdout);
  }
  for (int i = 0; i < NB_CONSO; ++i) {
    pthread_join(pidConso[i], NULL);
  }

  printf("All threads have completed their tasks\n");
  fflush(stdout);

  sem_close(fifoSem);
  sem_unlink("/fifoSem");
}
